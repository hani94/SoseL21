package SoseLan21.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.scope.ListScope;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class VariableReference_Constraints extends BaseConstraintsDescriptor {
  public VariableReference_Constraints() {
    super(CONCEPTS.VariableReference$8m);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.var$o$pp, this, true, false) {
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return new SNodePointer("r:4eb24fb5-1fc3-48c6-8ba1-f4d039f9eb8f(SoseLan21.constraints)", "5600988208342730327");
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            Iterable<SNode> vars = ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.SoSeWorksheet$xH, false, false), CONCEPTS.Variable$Ld, false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
              public boolean accept(final SNode it) {
                return SPropertyOperations.getString(it, PROPS.name$MnvL) != null && Sequence.fromIterable(SLinkOperations.collect(SNodeOperations.getNodeDescendants(SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.SoSeWorksheet$xH, false, false), CONCEPTS.VariableReference$8m, false, new SAbstractConcept[]{}), LINKS.var$o$pp)).where(new IWhereFilter<SNode>() {
                  public boolean accept(SNode itc) {
                    return SPropertyOperations.getString(itc, PROPS.name$MnvL) == SPropertyOperations.getString(it, PROPS.name$MnvL);
                  }
                }).count() <= 1;
              }
            });
            return new ListScope(vars) {

              @Override
              public String getName(SNode child) {
                return SPropertyOperations.getString(SNodeOperations.cast(child, CONCEPTS.Variable$Ld), PROPS.name$MnvL);
              }
            };
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept VariableReference$8m = MetaAdapterFactory.getConcept(0x49e25ac895434e93L, 0xad91f1c8e0f96a25L, 0x7a4fffd757936fe2L, "SoseLan21.structure.VariableReference");
    /*package*/ static final SConcept SoSeWorksheet$xH = MetaAdapterFactory.getConcept(0x49e25ac895434e93L, 0xad91f1c8e0f96a25L, 0x7a4fffd757936ca7L, "SoseLan21.structure.SoSeWorksheet");
    /*package*/ static final SConcept Variable$Ld = MetaAdapterFactory.getConcept(0x49e25ac895434e93L, 0xad91f1c8e0f96a25L, 0x7a4fffd757936cb2L, "SoseLan21.structure.Variable");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink var$o$pp = MetaAdapterFactory.getReferenceLink(0x49e25ac895434e93L, 0xad91f1c8e0f96a25L, 0x7a4fffd757936fe2L, 0x7a4fffd757936fe8L, "var");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
